package javato.activetesting;

import java.util.* ;

import javato.activetesting.activechecker.ActiveChecker;
import javato.activetesting.analysis.AnalysisImpl;
import javato.activetesting.common.Parameters;

/**
 * Copyright (c) 2007-2008,
 * Koushik Sen    <ksen@cs.berkeley.edu>
 * All rights reserved.
 * <p/>
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * <p/>
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * <p/>
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * <p/>
 * 3. The names of the contributors may not be used to endorse or promote
 * products derived from this software without specific prior written
 * permission.
 * <p/>
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class LocksetAnalysis extends AnalysisImpl {

	public enum MemoryState {Virgin, Exclusive, Shared, SharedModified} ;

	public HashMap<Integer, LinkedList<Integer>> heldLocks = new HashMap<Integer, LinkedList<Integer>>() ;
	public HashMap<Long, HashSet<Integer>> candidates = new HashMap<Long, HashSet<Integer>>() ;
	public HashMap<Long, MemoryState> state = new HashMap<Long, MemoryState>() ;
	public HashMap<Long, Integer> firstThread = new HashMap<Long, Integer>() ;

	public void initialize() {

	}

	public void methodEnterBefore(Integer iid, Integer thread, String method) {
	}

	public void methodExitAfter(Integer iid, Integer thread, String method) {
	}

	public void lockBefore(Integer iid, Integer thread, Integer lock, Object actualLock) {
	}

	public void lockAfter(Integer iid, Integer thread, Integer lock, Object actualLock) {
		synchronized(heldLocks) {
			LinkedList<Integer> ls = heldLocks.get(thread) ;
			if (ls == null)
				ls = new LinkedList<Integer>() ;
			ls.addFirst(lock) ;
		}
	}

	public void unlockAfter(Integer iid, Integer thread, Integer lock) {
		synchronized(heldLocks) {
			LinkedList<Integer> ls = heldLocks.get(thread) ;
			if (ls != null)
				ls.remove(lock) ;
		}
	}

	public void startBefore(Integer iid, Integer parent, Integer child) {
	}

	public void waitAfter(Integer iid, Integer thread, Integer lock) {
		synchronized (ActiveChecker.lock) {
		}
	}

	public void notifyBefore(Integer iid, Integer thread, Integer lock) {
	}

	public void notifyAllBefore(Integer iid, Integer thread, Integer lock) {
	}

	public void joinAfter(Integer iid, Integer parent, Integer child) {
	}

	public void readBefore(Integer iid, Integer thread, Long memory, boolean isVolatile) {
		if (isVolatile)
			return ;

		MemoryState st ;
		LinkedList<Integer> h ;
		
		synchronized(state) {
			if (state.containsKey(memory)) 
				st = state.get(memory) ;
			else 
				st = MemoryState.Virgin ;

			System.out.println("readBefore: " + st) ;


			switch(st) {
				case Virgin:
					st = MemoryState.Exclusive ; 
					firstThread.put(memory, thread) ;
					break ;

				case Exclusive:
					if (thread.equals(firstThread.get(memory))) {
						state.put(memory, MemoryState.Exclusive) ;
					}
					else {
						state.put(memory, MemoryState.Shared) ;
						synchronized(heldLocks) {
							h = heldLocks.get(thread) ;
						}
						synchronized(candidates) {
							candidates.put(memory, new HashSet<Integer>(h)) ;
							// C(memory) = {*} \cup held_lock(thread) = held_lock(thread) ;
						}
					}
					break ;

				case Shared:
					// state.put(memory, MemoryState.Shared) ;				
					synchronized(heldLocks) {
						h = heldLocks.get(thread) ;
					}
					synchronized(candidates) {
						HashSet<Integer> c = candidates.get(memory) ;
						c.retainAll(h) ;
						//candidates.put(memory, c) ;					
					}					
					break ;

				case SharedModified:
					synchronized(heldLocks) {
						h = heldLocks.get(thread) ;
					}
					synchronized(candidates) {
						HashSet<Integer> c = candidates.get(memory) ;
						c.retainAll(h) ;
						if (c.isEmpty()) 
							System.out.println("A data race is detected at " + javato.activetesting.analysis.Observer.getIidToLine(iid)) ;
					}
					break ;

				default:
					break ;
			}
		}
	}

	public void writeBefore(Integer iid, Integer thread, Long memory, boolean isVolatile) {
		if (isVolatile)
			return ;
	}

	public void finish() {
		synchronized (ActiveChecker.lock) {
		}
	}
}
